{
  double havDist13=havDistance(lat1,lat3,lng1 - lng3);
  if (havDist13 <= havTolerance) {
    return true;
  }
  double havDist23=havDistance(lat2,lat3,lng2 - lng3);
  if (havDist23 <= havTolerance) {
    return true;
  }
  double sinBearing=sinDeltaBearing(lat1,lng1,lat2,lng2,lat3,lng3);
  double sinDist13=sinFromHav(havDist13);
  double havCrossTrack=havFromSin(sinDist13 * sinBearing);
  if (havCrossTrack > havTolerance) {
    return false;
  }
  double havDist12=havDistance(lat1,lat2,lng1 - lng2);
  double term=havDist12 + havCrossTrack * (1 - 2 * havDist12);
  if (havDist13 > term || havDist23 > term) {
    return false;
  }
  if (havDist12 < 0.74) {
    return true;
  }
  double cosCrossTrack=1 - 2 * havCrossTrack;
  double havAlongTrack13=(havDist13 - havCrossTrack) / cosCrossTrack;
  double havAlongTrack23=(havDist23 - havCrossTrack) / cosCrossTrack;
  double sinSumAlongTrack=sinSumFromHav(havAlongTrack13,havAlongTrack23);
  return sinSumAlongTrack > 0;
}
