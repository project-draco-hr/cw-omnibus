{
  int size=poly.size();
  if (size == 0) {
    return false;
  }
  double tolerance=toleranceEarth / SphericalUtil.EARTH_RADIUS;
  double havTolerance=hav(tolerance);
  double lat3=toRadians(point.latitude);
  double lng3=toRadians(point.longitude);
  LatLng prev=poly.get(closed ? size - 1 : 0);
  double lat1=toRadians(prev.latitude);
  double lng1=toRadians(prev.longitude);
  if (geodesic) {
    for (    LatLng point2 : poly) {
      double lat2=toRadians(point2.latitude);
      double lng2=toRadians(point2.longitude);
      if (isOnSegmentGC(lat1,lng1,lat2,lng2,lat3,lng3,havTolerance)) {
        return true;
      }
      lat1=lat2;
      lng1=lng2;
    }
  }
 else {
    double minAcceptable=lat3 - tolerance;
    double maxAcceptable=lat3 + tolerance;
    double y1=mercator(lat1);
    double y3=mercator(lat3);
    double[] xTry=new double[3];
    for (    LatLng point2 : poly) {
      double lat2=toRadians(point2.latitude);
      double y2=mercator(lat2);
      double lng2=toRadians(point2.longitude);
      if (max(lat1,lat2) >= minAcceptable && min(lat1,lat2) <= maxAcceptable) {
        double x2=wrap(lng2 - lng1,-PI,PI);
        double x3Base=wrap(lng3 - lng1,-PI,PI);
        xTry[0]=x3Base;
        xTry[1]=x3Base + 2 * PI;
        xTry[2]=x3Base - 2 * PI;
        for (        double x3 : xTry) {
          double dy=y2 - y1;
          double len2=x2 * x2 + dy * dy;
          double t=len2 <= 0 ? 0 : clamp((x3 * x2 + (y3 - y1) * dy) / len2,0,1);
          double xClosest=t * x2;
          double yClosest=y1 + t * dy;
          double latClosest=inverseMercator(yClosest);
          double havDist=havDistance(lat3,latClosest,x3 - xClosest);
          if (havDist < havTolerance) {
            return true;
          }
        }
      }
      lat1=lat2;
      lng1=lng2;
      y1=y2;
    }
  }
  return false;
}
