{
  Socket socket=null;
  Socket sslSocket=null;
  try {
    if (conn == null || target == null || params == null) {
      throw new IllegalArgumentException("Required argument may not be null");
    }
    if (conn.isOpen()) {
      throw new IllegalStateException("Connection must not be open");
    }
    Scheme scheme=schemeRegistry.getScheme(target.getSchemeName());
    SchemeSocketFactory schemeSocketFactory=scheme.getSchemeSocketFactory();
    int port=scheme.resolvePort(target.getPort());
    String host=target.getHostName();
    socket=new Socket();
    conn.opening(socket,target);
    socket.setSoTimeout(READ_TIMEOUT_MILLISECONDS);
    socket.connect(new InetSocketAddress(proxy.getHostName(),proxy.getPort()),CONNECT_TIMEOUT_MILLISECONDS);
    DataOutputStream outputStream=new DataOutputStream(socket.getOutputStream());
    outputStream.write((byte)0x04);
    outputStream.write((byte)0x01);
    outputStream.writeShort((short)port);
    outputStream.writeInt(0x01);
    outputStream.write((byte)0x00);
    outputStream.write(host.getBytes());
    outputStream.write((byte)0x00);
    DataInputStream inputStream=new DataInputStream(socket.getInputStream());
    if (inputStream.readByte() != (byte)0x00 || inputStream.readByte() != (byte)0x5a) {
      throw new IOException("SOCKS4a connect failed");
    }
    inputStream.readShort();
    inputStream.readInt();
    if (schemeSocketFactory instanceof SSLSocketFactory) {
      sslSocket=((SSLSocketFactory)schemeSocketFactory).createLayeredSocket(socket,host,port,params);
      conn.opening(sslSocket,target);
      sslSocket.setSoTimeout(READ_TIMEOUT_MILLISECONDS);
      prepareSocket(sslSocket,context,params);
      conn.openCompleted(schemeSocketFactory.isSecure(sslSocket),params);
    }
 else {
      conn.opening(socket,target);
      socket.setSoTimeout(READ_TIMEOUT_MILLISECONDS);
      prepareSocket(socket,context,params);
      conn.openCompleted(schemeSocketFactory.isSecure(socket),params);
    }
  }
 catch (  IOException e) {
    try {
      if (sslSocket != null) {
        sslSocket.close();
      }
      if (socket != null) {
        socket.close();
      }
    }
 catch (    IOException ioe) {
    }
    throw e;
  }
}
